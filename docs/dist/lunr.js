var lunrIndex = [{"id":"changelog","title":"Changelog","body":"All notable changes to this project will be documented in this file.\n\nThe format is based on [Keep a Changelog](https:\/\/keepachangelog.com\/en\/1.0.0\/), and this project adheres to [Semantic Versioning](https:\/\/semver.org\/spec\/v2.0.0.html).\n\n## [Unreleased]\n\n- lorem\n\n## [0.3.0] - 2024-03-15\n\n### Changed\n\n- Whitespace at the end of the body is no longer removed during decoding.\n\n### Removed\n\n- Support for PHP < 8\n\n## [0.2.0] - 2022-04-29\n\n### Added\n\n- Test coverage for encode\/decode\n\n### Fixed\n\n- Parsing issue the dropped bodies.\n- Other small fixes."},{"id":"readme","title":"Taskcamp API","body":"![Taskcamp API](..\/..\/images\/taskcamp.jpg)\n\n## Summary\n\nThis is the core API library for Taskcamp, by [In the Loft Studios](https:\/\/www.intheloftstudios.com).  It should be used by API clients wishing to work with this application.\n\nAt the heart, it defines a new serialzation format which is a combination of HTML, YAML, and markdown to represent complicated data relationships, which look like the following.   See [this page](@mime) for more info.\n\nThe corresponding MIME type is: `application\/prs.taskcamp.entity`.\n\n    ---\n    attribute: value\n    ---\n    # title\n\n    body\n\n## PHP\n\n### Installation\n\n    composer require aklump\/taskcamp_api\n\n### Usage\n\n#### Deserialize\n\nThis is what a JSON representation of an `\\AKlump\\Taskcamp\\API\\Entity` looks like:\n\n    {\n        \"type\": \"bug\",\n        \"properties\": {\n            \"projectName\": \"My Project\",\n            \"projectId\": 123\n        },\n        \"data\": {\n            \"device\": \"mac\",\n            \"os\": {\n                \"name\": \"macosx\",\n                \"version\": \"10.13.6\"\n            }\n        },\n        \"title\": \"The title has too much top margin\",\n        \"body\": \"\"\n    }\n\nHere is how you would deserialize a JSON string, like the one above.\n\n    use AKlump\\Taskcamp\\API\\Entity;\n    use AKlump\\Taskcamp\\API\\EntityEncoder;\n    use AKlump\\Taskcamp\\API\\EntitySerializer;\n\n    $serializer = new EntitySerializer();\n    $entity = $serializer->deserialize($json, Entity::class, 'json');\n\nIf the data was encoded in another format you would use either of these:\n\n    $entity = $serializer->deserialize($entity_markup, Entity::class, EntityEncoder::TYPE);\n    $entity = $serializer->deserialize($xml, Entity::class, 'xml');\n\n#### Serialize\n\nHere's how you would serialize an object into `EntityEncoder::TYPE` format.\n\n    $entity = new Entity();\n    $entity\n        ->setType('feature')\n        ->setTitle('Augment the footer with another section')\n        ->setBody('In order to fit in the about section in the footer, we need to create a fourth column that can take a custom block.  The block needs to be added to the region so the client can edit it.')\n        ->setProperties(['projectId' => 123])\n        ->setData(['priority' => 'high']);\n    $markup = $serializer->serialize($entity, EntityEncoder::TYPE);\n\nAnd this is how that format looks:\n\n    ---\n    priority: high\n    ---\n    # Augment the footer with another section\n\n    In order to fit in the about section in the footer, we need to create a fourth column that can take a custom block.  The block needs to be added to the region so the client can edit it.\n\n## Javascript\n\n@todo\n\n### Installation\n\n    yarn add @aklump\/taskcamp_api\n\nOr if not using _yarn_:\n\n    npm install @aklump\/taskcamp_api"},{"id":"mime","title":"Taskcamp MIME Types","body":"## application\/prs.taskcamp.entity\n\nThis is used to represent a taskcamp entity (in this case a bug) and looks like this:\n\n```\n\n---\nurl: 'http:\/\/website.local.loft\/'\nscreen:\n    width: 1152\n    height: 2048\n    colorDepth: 24\n    pixelDepth: 24\n    orientation: 270\ndevice: mac\n---\n# asdfsadf\n\nsafsafsa\n```\n\n* The document consists of three sections: a self-closing XML element, YAML data, and markdown content\n* These three sections will be referred to as: _element_, _data_ and _content_\n\n### Element\n\n* The element MUST be present and MUST be contained on a single line\n* The element MUST be a pseudo-HTML open tag that defines the type of object, in the example the object is a `bug`. It should be a self-closing tag. We say pseudo because it\n* Neither the element nor the entire document use an \"HTML\" closing tag\n* The element MAY have one or more attribute\/values; the values MAY be wrapped in double or single quotes. If an attribute value contains a space, it MUST be wrapper in single or double quotes.\n* Attributes SHOULD be used to convey non-human data about the entity, such as database ids, or related ids. YAML frontmatter should be used to convey data that a human may be interested in viewing.\n\n### Data\n\n* This OPTIONAL section is a YAML mapping of key\/value pairs.\n* If any data is present then this section must be followed by a separator line of 3 or more dashes, `---`\n* This section may be preceded by a separator line of 3 or more dashes.\n* If there is no data, then no separator lines are required.\n\n### Content\n\n* The markdown section MUST contain an top-level title, e.g. `# Some Object Title`\n* The markdown section MAY contain indefinite additional markdown text.\n\n### Relaxed Mode\n\nRelaxed mode allows for less typing.\n\n* Header closing is optional.\n* Header properties MUST only be wrapped in quotes when the value contains a space, otherwise quotes MAY be omitted.\n* YAML frontmatter does not need to be preceeded by a `---` line.\n\nHere's the above example in relaxed mode:\n\n```\n\nurl: 'http:\/\/website.local.loft\/'\nscreen:\n    width: 1152\n    height: 2048\n    colorDepth: 24\n    pixelDepth: 24\n    orientation: 270\ndevice: mac\n---\n# asdfsadf\n\nsafsafsa\n```\n\n## application\/prs.taskcamp.cmd+text\n\n@todo"}]